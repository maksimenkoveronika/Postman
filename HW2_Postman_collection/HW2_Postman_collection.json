{
	"info": {
		"_postman_id": "4c18cb05-3287-43f4-8255-ff18c85da33a",
		"name": "HW_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18604090"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить корректность body \r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let jsonData = pm.response.json()\r",
							"let name_s = jsonData.name\r",
							"pm.test(\"name s request\", function () {\r",
							"    pm.expect(name_s).to.eql(\"Nika\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let age_s = jsonData.age\r",
							"pm.test(\"age s request\", function () {\r",
							"    pm.expect(age_s).to.eql(\"27\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let salary_s = jsonData.salary\r",
							"pm.test(\"salary s request\", function () {\r",
							"    pm.expect(salary_s).to.eql(1500);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request\r",
							"let req_s = request.data;\r",
							"console.log(request.data);\r",
							"\r",
							"// 8.Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"check name request \", function () {\r",
							"      pm.expect(request.data.name).to.eql(name_s);\r",
							"});\r",
							"\r",
							"// 9.Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"check age request\", function () {\r",
							"      pm.expect(request.data.age).to.eql(age_s);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"check salary request\", function () {\r",
							"      pm.expect(+request.data.salary).to.eql(salary_s);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"check 1_5 year\", function () {\r",
							"        pm.expect(jsonData.family.u_salary_1_5_year).to.eql(+request.data.salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nika",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200\r",
							"pm.test(\"status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request\r",
							"let req_s = request.data;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"let params = pm.request.url.query.toObject();\r",
							"pm.test(\"check name request \", function () {\r",
							"      pm.expect(jsonData.name).to.eql(params.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"check age request \", function () {\r",
							"      pm.expect(jsonData.age).to.eql(params.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"check salary request \", function () {\r",
							"      pm.expect(jsonData.salary).to.eql(+params.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из respons\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"the dog have a name\", function() {\r",
							"    pm.expect(jsonData.family.pets.dog.name).not.eq(undefined);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"the dog have a age\", function() {\r",
							"    pm.expect(jsonData.family.pets.dog.age).not.eq(undefined);\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"the dog have a Luky\", function() {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"the dog have a age 4\", function() {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Nika&age=27&salary=1500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nika"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200\r",
							"pm.test(\"status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request\r",
							"let req_s = request.data;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"let params = pm.request.url.query.toObject();\r",
							"pm.test(\"check name request \", function () {\r",
							"      pm.expect(jsonData.name).to.eql(params.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"check age request \", function () {\r",
							"      pm.expect(jsonData.age).to.eql(+params.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request\r",
							"console.log(params.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test('salary check', function (){\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+params.salary)\r",
							"})\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test('salary check', function (){\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(params.salary * 2)\r",
							"})\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test('salary check', function (){\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(params.salary * 3)\r",
							"})\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"name\", jsonData.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"let elements = jsonData.salary\r",
							"for (let i = 0; i <= 2; i++) {\r",
							"\tconsole.log(elements[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Nika&age=27&salary=1500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nika"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 4. Отправить запрос\r",
							"// 5. Статус код 200\r",
							"pm.test(\"status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request\r",
							"let req_s = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('params start_qa_salary ', function(){\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary')\r",
							"})\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('params qa_salary_after_6_months ', function(){\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months')\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test('params qa_salary_after_12_months ', function(){\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months')\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('params qa_salary_after_1.5_year ', function(){\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year')\r",
							"})\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('params qa_salary_after_3.5_years ', function(){\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years')\r",
							"})\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test('params person ', function(){\r",
							"    pm.expect(jsonData).to.have.property('person')\r",
							"})\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test('check start_qa_salary', function (){\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+request.data.salary)\r",
							"})\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test('check qa_salary_after_6_months', function (){\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(request.data.salary*2)\r",
							"})\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test('check qa_salary_after_12_months', function (){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(request.data.salary*2.7)\r",
							"})\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test('check qa_salary_after_1.5_year', function (){\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(request.data.salary*3.3)\r",
							"})\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test('check qa_salary_after_3.5_years', function (){\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(request.data.salary*3.8)\r",
							"})\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test('check person', function (){\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+request.data.salary)\r",
							"})\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"pm.test('check u_age', function (){\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+request.data.age)\r",
							"})\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test('check u_salary_5_years', function (){\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+request.data.salary*4.2)\r",
							"})\r",
							"\r",
							"// 22. *** Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"let element = jsonData.person\r",
							"for(let key in element) {\r",
							"    console.log('Key: ' + key + ', value: ' + element[key] );\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					""
				]
			}
		}
	]
}